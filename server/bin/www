#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var query = require('./../socket_query/query');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
* 增加socket.io，开启监听
* */
var io = require('socket.io')(server);
io.on('connection', function (socket) {

  //测试联通，触发link
  socket.emit('link', {message: "socket.io服务启动"});

  //加入房间操作
  socket.on('joinRoom', function (message) {
    var client_id = message.client_id; /*用户的设备ID*/
    var room_num = message.room_num; /*房间号*/

    //加入某个房间
    //该房间1～n号都能进
    socket.join(room_num);
    //查询用户信息
    var userInfo = query.getUserTypeByClientID(client_id, room_num);
    //加入身份房间
    //警察和杀手分别进入自己的房间
    if(userInfo.type === 'police' || userInfo.type === 'killer'){
      socket.join(room_num + '_' + userInfo.type);
    }
  });

  //根据房间号广播消息
  socket.on('day_broadcast', function(room_num, message){
    //向所有的同伴广播消息，包括自己
    io.sockets.in(room_num).emit('message', message);
  });

  //杀手间广播消息
  socket.on('killer_broadcast', function(client_id, room_num, message){
    var userInfo = query.getUserTypeByClientID(client_id, room_num);
    if(userInfo.type === 'killer'){
      io.sockets.in(room_num + '_killer').emit('message', message);
    }
    //else do noting
  });

  //警察间广播消息
  socket.on('police_broadcast', function(client_id, room_num, message){
    var userInfo = query.getUserTypeByClientID(client_id, room_num);
    if(userInfo.type === 'police'){
      io.sockets.in(room_num + '_police').emit('message', message);
    }
    //else do noting
  });





  //io.sockets.connected[socket.id].emit('message', '针对单个客户端推送');

});




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
